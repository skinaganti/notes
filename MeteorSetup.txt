
see https://gist.github.com/gabrielhpugliese/5855677 as reference

1. Download VirtualBox v4.3.12 (latest version v4.3.14 doesn't work with win 8): 
https://www.virtualbox.org/wiki/Download_Old_Builds_4_3

2. Download latest Vagrant: http://www.vagrantup.com/downloads.html

3. Download git: http://git-scm.com/download/win
(It will install ssh binaries required by Vagrant and let you connect to the VM)

4. Create a folder to store your Vagrant files + Meteor project

5. Download this script and save it as 'meteor.sh' into that folder:
https://gist.github.com/gabrielhpugliese/5471763/raw/6bc6f616842c75669d1c6f28ce7cd714fa28967e/meteor.sh

#!/bin/bash
sudo apt-get update
sudo apt-get install python-software-properties
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv 7F0CEB10
echo "deb http://downloads-distro.mongodb.org/repo/ubuntu-upstart dist 10gen" | sudo tee -a /etc/apt/sources.list.d/10gen.list
sudo apt-get update
sudo apt-get install -y git mongodb-10gen curl
cd /usr/local
wget http://nodejs.org/dist/v0.8.23/node-v0.8.23-linux-x86.tar.gz
sudo tar -xvzf node-v0.8.23-linux-x86.tar.gz --strip=1
rm -f node-v0.8.23-linux-x86.tar.gz
curl https://install.meteor.com | sudo sh
sudo npm install -g meteorite


Steps on the Windows command line:

6. goto Start menu, type cmd, shift + enter (to login as administrator)

7. cd into your 'vagrant + meteor' project folder

8. add 'C:\Program Files (x86)\Git\bin' to Path variable -System variables, -Environment Variables, -Advanced, -Advanced System Settings, -System

9. vagrant init precise32 http://files.vagrantup.com/precise32.box (command to install Ubuntu 10.04 x86)

10. edit the Vagrantfile and add the following lines to the Vagrant.configure(VAGRANTFILE_API_VERSION) block:

  config.vm.provision :shell, :path => "meteor.sh"
  config.vm.network :forwarded_port, guest: 3000, host: 3000
  config.vm.provider "virtualbox" do |v|
    v.customize ["setextradata", :id, "VBoxInternal2/SharedFoldersEnableSymlinksCreate/v-root", "1"]
  end
 
11. run following command to download vbguest plugin for vagrant to keep VirtualBox Guest Additions in sync with Vagrant
vagrant plugin install vagrant-vbguest (see https://github.com/dotless-de/vagrant-vbguest for more details)

11. vagrant up (command to download Ubuntu box, configure Meteor, and get it up)

12. vagrant ssh (command to connect to the Ubuntu VM and access it's command lines

13. run following command to download text editor vim
sudo apt-get install vim


Steps on the Ubuntu command line (to create new project):

13. cd /vagrant (This is shared with the windows host by default)  

14. mrt create ~/meteorapp
this creates the app in the home directory inside the vm 

15. mrt create meteorapp && cd meteorapp && rm -rf .meteor && mkdir .meteor/
this creates the app in the /vagrant directory in the vm (which is shared with the windows host),
then it goes into the app's folder and deletes the .meteor directory and creates a new empty .meteor directory

16. sudo mount --bind /home/vagrant/meteorapp/.meteor/ /vagrant/meteorapp/.meteor/
this links the '.meteor' directory in the home directory (the source) to the '.meteor' directory in the /vagrant directory (the destination) 

this is required bc the Meteor app doesn't have permission to the files in '.meteor' in the /vagrant directory bc it is shared by windows, but it does have permission to access the files in '.meteor' in the home directory in the vm 
(for more detailed information on the reasons for doing steps 14, 15, and 16, please see Symbolic Link notes)


17. echo “sudo mount --bind /home/vagrant/meteorapp/.meteor/ /vagrant/meteorapp/.meteor/” >> ~/.bashrc && source ~/.bashrc 
you can also vim into '~/.bashrc' and add 'mount --bind /home/vagrant/meteorapp/.meteor/ /vagrant/meteorapp/.meteor/'
to the last line of the bashrc file and then run the command 'source ~/.bashrc' at the command prompt

18. mrt run

Go to http://localhost:3000 in Windows browser and see it running! :)


Symbolic Link Notes:

The point here is to use the .meteor folder of your app pointing to another place inside the VM 
(run ls -la .meteor/ on command-line and you will see the symbolic link), so Meteor uses the VM folder, 
not Windows folder, and won’t have permissions problems. 

You will also need to do all git flow inside Ubuntu command-line, because Windows can’t follow those links.

Make sure you do version control INSIDE THE VM, so the software can follow the symlink.

Also the see the following note:

  "Many thanks to Gabriel Pugliese who provided the steps to mount --bind the database directories for the apps as symlinks to another area of the VM (Source: http://goo.gl/clpKa). This helped streamline this process and allows for the utilization of the Synced Folders provided by Vagrant which allows for the use of pretty much any development tools of you pleasing to code applications locally from the Windows host machine. The issue that this resolved is that without the symlink, MongoDB can't operate in the synced folder on Windows. Normal symlinks also won't work, so using mount --bind was a great find."

  -https://github.com/shoebappa/vagrant-meteor-windows


Linux Notes:

'/vagrant' on vm points to 'C:/mtr' on win box
'/vagrant/leaderboard' on vm points to 'C:/mtr/leaderboard' on win box

'git clone http://github.com/skinaganti/leaderboard.git' copies repository from GitHub and saves it in a folder named 'leaderboard', 

it can't be run in '/vagrant' since that dir already has a folder named 'leaderboard', 
so it must be run in '/vagrant/leaderboard'

we must now sync up '/vagrant/leaderboard' with '/vagrant/leaderboard/leaderboard/',
we can use the command 'rsync -a -v 'source dir' 'destination dir'
rsync -a -v leaderboard/ ./

we can now delete '/vagrant/leaderboard/leaderboard/',
rm -r leaderboard/

or 

we could have run the rsync command with the --remove-source-files parameter
rsync -a -v --remove-source-files leaderboard/ ./

to halt a vagrant environment, first lookup all existing environments w/ following command:
vagrant global-status

and lookup id of currently running vm and run 
vagrant halt 'id'

if the vm does not give a message saying connection closed by remote host and continues to run, type in 'exit'
to logout and close connection

*after the vm is halted, look in currently running Windows processes in Task Manager and stop vboxheadless process

To restart a vagrant VM without running all Meteor installation again: 
vagrant reload --no-provision (or just remove the shell path you’ve put on Vagrantfile on line 9)

To connect to running vagrant VM:
vagrant ssh 'id' (make sure git binaries are appended to path so vagrant can use ssh)

